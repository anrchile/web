---
interface Props {
  videoId: string;
  title?: string;
  thumbnailQuality?: "default" | "hq" | "mq" | "sd" | "maxres";
}

const {
  videoId,
  title = "Video de YouTube",
  thumbnailQuality = "hq",
} = Astro.props;

// Construir URL de la miniatura
const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/${thumbnailQuality}default.jpg`;
---

<dialog id="youtube-modal" class="video-dialog min-w-[80vw] min-h-[80vh]">
  <div class="dialog-content">
    <button class="close-button" type="button">&times;</button>
    <div class="video-container">
      <iframe
        width="560"
        height="315"
        title={title}
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen></iframe>
    </div>
  </div>
</dialog>

<div class="video-preview" data-video-id={videoId}>
  <img src={thumbnailUrl} alt={title} loading="lazy" class="thumbnail" />
  <div class="play-button">
    <svg viewBox="0 0 24 24" width="48" height="48">
      <path fill="white" d="M8 5v14l11-7z"></path>
    </svg>
  </div>
</div>

<style>
  .video-preview {
    position: relative;
    cursor: pointer;
    max-width: 560px;
    margin: 0 auto;
  }

  .thumbnail {
    width: 100%;
    height: auto;
    border-radius: 8px;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.7);
    border-radius: 50%;
    padding: 12px;
    transition: background 0.3s;
  }

  .video-preview:hover .play-button {
    background: rgba(230, 33, 23, 0.9);
  }

  .video-dialog {
    padding: 0;
    border: none;
    border-radius: 12px;
    max-width: 90vw;
    background: rgba(0, 0, 0, 0.9);
  }

  .dialog-content {
    position: relative;
    padding: 20px;
  }

  .close-button {
    position: absolute;
    top: 0;
    right: 0;
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 8px;
    z-index: 1;
  }

  .video-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
    height: 0;
    overflow: hidden;
  }

  .video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }

  dialog::backdrop {
    background: rgba(0, 0, 0, 0.8);
  }
</style>

<script is:inline>
  // Inicializar los eventos cuando el DOM estÃ© listo
  document.addEventListener("DOMContentLoaded", function () {
    const dialog = document.querySelector("#youtube-modal");
    const closeButton = dialog?.querySelector(".close-button");
    const previewElements = document.querySelectorAll(".video-preview");

    previewElements.forEach((preview) => {
      preview.addEventListener("click", function () {
        const videoId = this.dataset.videoId;
        const iframe = dialog?.querySelector("iframe");

        if (dialog && iframe && videoId) {
          iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
          dialog.showModal();
        }
      });
    });

    closeButton?.addEventListener("click", function () {
      const iframe = dialog?.querySelector("iframe");

      if (dialog && iframe) {
        iframe.src = "";
        dialog.close();
      }
    });

    // Cerrar con la tecla Escape
    dialog?.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        const iframe = dialog.querySelector("iframe");
        if (iframe) {
          iframe.src = "";
        }
      }
    });
  });
</script>
